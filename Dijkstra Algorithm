Dijkstra's algorithm is widely used is its efficiency in finding the shortest path in a graph with non-negative edge weights.
It guarantees finding the shortest path from a single source node to all other nodes in the graph.
Complexity:O((V + E) log V) 

Code:

// Dijkstra algorithm: here given only one soure node. and you have to find minimum distance
// for every other node using this source node. suppose there is a source node a,, and other nodes
// are b,c,d,e.. so from source node if there exists two or more paths to reach node b, then you have to find
// the path which cost is minimum or which distacne is minimum,, same for other nodes(c,d,e).
// If for any node no path exist then we will give infinity distance for this node.

#include<bits/stdc++.h>
using namespace std;
const int N = 100005;
#define inf 1e18;
#define ll long long
vector<pair<int,int>>graph[N];
bool vis[N];
int dis[N];
int n, parent[N]; ///parent[N] hold the shortest paths from to source to every others node.
void dijkstra(int src){
    for(int i=1;i<=n;i++){
        dis[i]=inf;
        parent[i]=-1;
    }
    dis[src] = 0;///distance of sourse is zero
    set<pair<int,int>>st;
    st.insert({0,src});
    while(!st.empty()){
        auto p = *st.begin();
        st.erase(st.begin());
        int w = p.first;
        int node = p.second;
        if(vis[node])continue;
        vis[node] = true;
        for(auto [v,w]:graph[node]){
            if(dis[v]>dis[node]+w){
                dis[v] = dis[node] + w;
                st.insert({dis[v],v});
                parent[v]=node;
            }
        }
    }
}
int main()
{
    ios::sync_with_stdio(false);cin.tie(0);
    int m;
    cin >> n >> m;
    for(int i=1;i<=m;i++){
        int u,v,w;
        cin >> u >> v >> w;
        graph[u].push_back({v,w});
        graph[v].push_back({u,w});
    }
    dijkstra(1);
   for(int i=1;i<=n;i++)cout<<dis[i]<< " ";

}

