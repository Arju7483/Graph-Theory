//complexity: O(V*E) and worst case: O(n^3)
#include <bits/stdc++.h>
using namespace std;
const int N = 2505;

int n, m, parent[N];
long long dist[N];
struct Edge
{
  int u,v,w;  
};
void print_shortest_path(int s,int d){
    vector<int>path;
    
    while(s != d){
        path.push_back(d);
        d = parent[d];
    }
    path.push_back(d);
    reverse(path.begin(),path.end());
    for(auto i:path) cout << i << " ";cout << endl;
}
void print_negative_cycle(int x){
    for (int i = 0; i < n; ++i) {
      x = parent[x];
    }
    vector<int> path;
    do {
      path.emplace_back(x);
      x = parent[x];
    } while (path.size() < 2 || path.back() != path[0]);
    reverse(path.begin(), path.end());
    for (int u: path) {
      cout << u << " ";
    }
}
void Bellman_Ford(){
    cin >> n >> m;
  Edge edge[m];
  for (int i = 0; i < m; i++) {
    cin >> edge[i].u >> edge[i].v >> edge[i].w;
    
  }
  fill(dist + 1, dist + 1 + n, 1e18);
  dist[1] = 0;
  int x = -1;
  for (int i = 0; i < n; ++i) {
    x = -1;
    for (auto e: edge) {
        int U = e.u, V = e.v, W = e.w;
      if (dist[V] > dist[U] + W) {
        dist[V] = dist[U] + W;
        parent[V] = U;
        x = V;
      }
    }
  }
  if (x == -1) {
    cout << "NO negative cycle.\n";
    int des = n;
    print_shortest_path(1,des);
  } else {
    cout << "Negative cycle is: \n";
    print_negative_cycle(x);
  }
}
int main() {
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
      #ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin); 
freopen("output.txt","w",stdout); 
#endif
  
  Bellman_Ford();
  return 0;
}
