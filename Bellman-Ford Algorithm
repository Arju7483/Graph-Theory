//complexity: O(V*E) and worst case: O(n^3)
#include<bits/stdc++.h>
using namespace std;
const int N = 505, inf = 1e9;
int dis[N], parent[N], n , m;
struct Edge
{
	int u,v,w;
};
void print_path(int s,int d){
	vector<int>path;
	
	while(s != d){
		path.push_back(d);
		d = parent[d];
	}
	path.push_back(d);
	reverse(path.begin(),path.end());
	for(auto i:path) cout << i << " ";cout << endl;
}
void print_negative_cycle(int x){
	int y = x;
	for (int i = 0; i < n; ++i)
            y = parent[y];

        vector<int> path;
        for (int cur = y;; cur = parent[cur]) {
            path.push_back(cur);
            if (cur == y && path.size() > 1)
                break;
        }
        reverse(path.begin(), path.end());

        for (int u : path)
            cout << u << ' ';
    }

int BellmanFord(){
	 cin >> n >> m;
	Edge edge[m];
	for(int i = 0; i < m; i++){
		cin >> edge[i].u >> edge[i].v >> edge[i].w;
	}
	int source = 1, target = 4;
	for(int i = 1; i <= n; i++) dis[i] = inf;
	dis[source] = 0;
    int x;
	for(int i = 1; i <= n; i++){
		 x = -1;
		for(Edge e: edge){
			int U = e.u;
			int V = e.v;
			int W = e.w;
			if(W < inf and dis[U] + W < dis[V]){
				dis[V] = dis[U] + W;
				parent[V] = U;
				dis[V] = max(dis[V],-inf); // for handling overflow
				x = U;
			}
		}
		if(x == -1) break;
	}
	if(x != -1){
		cout << "Negative weight: " << endl;
		print_negative_cycle(x);
	}
	else{
	print_path(source,target);	
	}
	//for(int i = 1; i <= n; i++) cout << dis[i] << " "; cout << endl; //distances
	
}
int main()
{
    ios::sync_with_stdio(false);cin.tie(0);

    #ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin); 
freopen("output.txt","w",stdout); 
#endif
    
        BellmanFord();
     
}
